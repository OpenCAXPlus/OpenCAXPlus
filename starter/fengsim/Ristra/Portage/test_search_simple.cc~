#include "test.h"
#include "portage/search/search_simple.h"
//#include "portage/search/kdtree.h"
//#include "portage/search/search_kdtree.h"

void test_search_simple () {
	Wonton::Simple_Mesh sm{0, 0, 1, 1, 2, 2};
	Wonton::Simple_Mesh tm{0, 0, 1, 1, 2, 2};
	const Wonton::Simple_Mesh_Wrapper source_mesh_wrapper(sm);
	const Wonton::Simple_Mesh_Wrapper target_mesh_wrapper(tm);
	std::cout << sm.num_entities(Wonton::Entity_kind::NODE, Wonton::Entity_type::ALL) << std::endl;
	std::cout << tm.num_entities(Wonton::Entity_kind::NODE, Wonton::Entity_type::ALL) << std::endl;
	
	Portage::SearchSimple<Wonton::Simple_Mesh_Wrapper,
						  Wonton::Simple_Mesh_Wrapper>
		search(source_mesh_wrapper, target_mesh_wrapper);
	
	for (int tc = 0; tc < 4; ++tc) {
		std::vector<int> candidates;
		search(tc, &candidates);
		for (int i=0; i<candidates.size(); i++)
			std::cout << candidates[i] << " ";
		std::cout << std::endl;
	}
	
	std::cout << std::endl;

	// *******************************************
	// *******************************************
	
	std::cout << "check kd tree" << std::endl;
	
	Portage::SearchKDTree<2, Portage::Entity_kind::CELL,
						  Wonton::Simple_Mesh_Wrapper,
						  Wonton::Simple_Mesh_Wrapper>
		search_kd(source_mesh_wrapper, target_mesh_wrapper);
   
	for (int tc = 0; tc < 4; ++tc) {
		std::vector<int> candidates = search_kd(tc);
		for (int i=0; i<candidates.size(); i++)
			std::cout << candidates[i] << " ";
		std::cout << std::endl;
	}
	

	//	std::cout << search_kd.getKDtree()->num_entities << std::endl;
	//for (int i=0; i<2*search_kd.getKDtree()->num_entities; i++)
	//	std::cout << search_kd.getKDtree()->linkp[i] << " ";
	//std::cout << std::endl;
	




}
