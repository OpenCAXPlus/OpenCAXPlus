#include <iostream>
#include <portage/search/search_kdtree.h>
#include <portage/intersect/intersect_r2d.h>

// wonton includes
#include "wonton/support/wonton.h"
#include "wonton/support/Point.h"
#include "wonton/mesh/simple/simple_mesh.h"
#include "wonton/mesh/simple/simple_mesh_wrapper.h"
#include "wonton/state/simple/simple_state.h"
#include "wonton/state/simple/simple_state_wrapper.h"

// portage includes
#include "portage/interpolate/interpolate_2nd_order.h"
#include "simple_intersect_for_tests.h"
#include "portage/support/portage.h"
#include "portage/driver/coredriver.h"

#include <fstream>

void test_example_2 ()
{
  // Create simple meshes

  std::shared_ptr<Wonton::Simple_Mesh> source_mesh =
    std::make_shared<Wonton::Simple_Mesh>(0.0, 0.0, 1.0, 1.0, 4, 4);
  std::shared_ptr<Wonton::Simple_Mesh> target_mesh =
    std::make_shared<Wonton::Simple_Mesh>(0.0, 0.0, 1.0, 1.0, 5, 5);

  // Create mesh wrappers

  Wonton::Simple_Mesh_Wrapper sourceMeshWrapper(*source_mesh);
  Wonton::Simple_Mesh_Wrapper targetMeshWrapper(*target_mesh);

  // count cells

  const int ncells_source =
      sourceMeshWrapper.num_owned_cells();
  const int ncells_target =
      targetMeshWrapper.num_owned_cells();

  std::cout << ncells_source << " " << ncells_target << std::endl;




  
  // Create a state object

  Wonton::Simple_State source_state(source_mesh);
  Wonton::Simple_State target_state(target_mesh);

  // Define a state vector with constant value and add it to the source state

  std::vector<double> data(ncells_source, 1.25);

  double sum1 = 0;
  for (int i=0; i<4; i++)
    for (int j=0; j<4; j++) {
      data[i*4+j] = exp(i+j);
      sum1 += exp(i+j)*0.25*0.25;
    }
  std::cout << "source mass total: " << sum1 << std::endl;

  //export_vtk(4,"source.vtk",data);

  
  source_state.add("cellvars", Wonton::Entity_kind::CELL, &(data[0]));


  std::cout << "ncells_source: " << ncells_source << std::endl;
  for (int i=0; i<data.size(); i++)
    std::cout << data[i] << " ";
  std::cout << std::endl;
  
  
  // Create state wrapper
  
  Wonton::Simple_State_Wrapper sourceStateWrapper(source_state);
  Wonton::Simple_State_Wrapper targetStateWrapper(target_state);

}
