#include <iostream>
#include <portage/search/search_kdtree.h>
#include <portage/intersect/intersect_r2d.h>

// wonton includes
#include "wonton/support/wonton.h"
#include "wonton/support/Point.h"
#include "wonton/mesh/simple/simple_mesh.h"
#include "wonton/mesh/simple/simple_mesh_wrapper.h"
#include "wonton/state/simple/simple_state.h"
#include "wonton/state/simple/simple_state_wrapper.h"

// portage includes
#include "portage/interpolate/interpolate_2nd_order.h"
#include "simple_intersect_for_tests.h"
#include "portage/support/portage.h"
#include "portage/driver/coredriver.h"

#include <fstream>

void export_vtk (int n, std::string filename, std::vector<double> val) {
    std::ofstream out(filename);
    out << "# vtk DataFile Version 2.0" << std::endl;
    out << "Structured Grid by Portage" << std::endl;
    out << "ASCII" << std::endl;
    out << "DATASET UNSTRUCTURED_GRID" << std::endl;
    out << "POINTS " << 4*n*n << " float" << std::endl;
    double d = 1.0 / n;
    for (int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
	    out << i*d << " " << j*d << " " << 0 << std::endl;
	    out << (i+1)*d << " " << j*d << " " << 0 << std::endl;
	    out << (i+1)*d << " " << (j+1)*d << " " << 0 << std::endl;
	    out << i*d << " " << (j+1)*d << " " << 0 << std::endl; 
	}
    }
    out << "CELLS " << n*n << " "<< n*n*5  << std::endl;
    for (int i=0; i<n*n; i++) {
        out << "4 " << i*4 << " " << i*4 + 1 << " " << i*4 + 2 << " " << i*4 + 3 << std::endl;
    }
    out << "CELL_TYPES " << n*n << std::endl;
    for (int i=0; i<n*n; i++) {
        out << "9" << std::endl;
    }
    out << "CELL_DATA " << n*n << std::endl;
    out << "SCALARS cell_scalars float" << std::endl;
    out << "LOOKUP_TABLE default" << std::endl;
    for (int i=0; i<n*n; i++) {
        out << val[i] << std::endl;
    }
    out.close();
}


int main(int argc, char** argv)
{
  // Create simple meshes

  std::shared_ptr<Wonton::Simple_Mesh> source_mesh =
    std::make_shared<Wonton::Simple_Mesh>(0.0, 0.0, 1.0, 1.0, 4, 4);
  std::shared_ptr<Wonton::Simple_Mesh> target_mesh =
    std::make_shared<Wonton::Simple_Mesh>(0.0, 0.0, 1.0, 1.0, 5, 5);

  // Create mesh wrappers

  Wonton::Simple_Mesh_Wrapper sourceMeshWrapper(*source_mesh);
  Wonton::Simple_Mesh_Wrapper targetMeshWrapper(*target_mesh);

  // count cells

  const int ncells_source =
      sourceMeshWrapper.num_owned_cells();
  const int ncells_target =
      targetMeshWrapper.num_owned_cells();

  std::cout << ncells_source << " " << ncells_target << std::endl;




  
  // Create a state object

  Wonton::Simple_State source_state(source_mesh);
  Wonton::Simple_State target_state(target_mesh);

  // Define a state vector with constant value and add it to the source state

  std::vector<double> data(ncells_source, 1.25);

  double sum1 = 0;
  for (int i=0; i<4; i++)
    for (int j=0; j<4; j++) {
      data[i*4+j] = exp(i+j);
      sum1 += exp(i+j)*0.25*0.25;
    }
  std::cout << "source mass total: " << sum1 << std::endl;

  export_vtk(4,"source.vtk",data);

  
  source_state.add("cellvars", Wonton::Entity_kind::CELL, &(data[0]));


  std::cout << "ncells_source: " << ncells_source << std::endl;
  for (int i=0; i<data.size(); i++)
    std::cout << data[i] << " ";
  std::cout << std::endl;
  
  
  // Create state wrapper
  
  Wonton::Simple_State_Wrapper sourceStateWrapper(source_state);
  Wonton::Simple_State_Wrapper targetStateWrapper(target_state);
  
  // Gather the cell coordinates as Portage Points for source and target meshes
  // for intersection. The outer vector is the cells, the inner vector is the
  // points of the vertices of that cell.
  
  std::vector<std::vector<Wonton::Point<2>>>
    source_cell_coords(ncells_source);
  std::vector<std::vector<Wonton::Point<2>>>
    target_cell_coords(ncells_target);
  
  // Actually get the Wonton::Points
  
  for (int c = 0; c < ncells_source; ++c)
    sourceMeshWrapper.cell_get_coordinates(c, &(source_cell_coords[c]));
  for (int c = 0; c < ncells_target; ++c)
    targetMeshWrapper.cell_get_coordinates(c, &(target_cell_coords[c]));
  
  // Interpolate from source to target mesh using the independent calculation
  // in simple_intersect_for_tests.h
  
  std::vector<double> outvals(ncells_target);
  std::vector<std::vector<Portage::Weights_t>>
    sources_and_weights(ncells_target);
  
  // Loop over target cells
  
  std::cout << "ncells_target: " << ncells_target << std::endl;
  for (int c = 0; c < ncells_target; ++c) {
    
    std::vector<int> xcells;
    std::vector<std::vector<double>> xwts;
    
    // Compute the moments
    // xcells is the source cell indices that intersect
    // xwts is the moments vector for each cell that intersects
    
    BOX_INTERSECT::intersection_moments<2>(target_cell_coords[c],
					   source_cell_coords,
					   &xcells, &xwts);
    
    // Pack the results into a vector of true Portage::Weights_t
    int const num_intersect_cells = xcells.size();
    std::vector<Portage::Weights_t> wtsvec(num_intersect_cells);
    
    //std::cout << "-----" << std::endl;
    //std::cout << num_intersect_cells << std::endl;
    for (int i = 0; i < num_intersect_cells; ++i) {
      wtsvec[i].entityID = xcells[i];
      wtsvec[i].weights = xwts[i];
      //for (int j=0; j<xwts[i].size(); j++)
      //std::cout << xwts[i][j] << " ";
      //std::cout << std::endl;
    }
    
    // Put the weights in final form
    
    sources_and_weights[c] = wtsvec;
  }
  
  // Now do it the Portage way
  
  // use default tolerances
  Portage::NumericTolerances_t num_tols = Portage::DEFAULT_NUMERIC_TOLERANCES<2>;
  
  // compute gradient field to pass to the interpolator
  using Driver = Portage::CoreDriver<2, Wonton::Entity_kind::CELL,
                                     Wonton::Simple_Mesh_Wrapper,
                                     Wonton::Simple_State_Wrapper>;
  
  Driver driver(sourceMeshWrapper, sourceStateWrapper,
                targetMeshWrapper, targetStateWrapper);
  
  auto gradients = driver.compute_source_gradient("cellvars");
  
  // Create Interpolation object
  
  Portage::Interpolate_2ndOrder<2, Wonton::Entity_kind::CELL,
                                Wonton::Simple_Mesh_Wrapper,
                                Wonton::Simple_Mesh_Wrapper,
                                Wonton::Simple_State_Wrapper,
                                Wonton::Simple_State_Wrapper,
                                double>
    interpolator(sourceMeshWrapper, targetMeshWrapper, sourceStateWrapper,
		 num_tols);
  
  interpolator.set_interpolation_variable("cellvars", &gradients);
  
  
  Wonton::transform(targetMeshWrapper.begin(Wonton::Entity_kind::CELL),
		    targetMeshWrapper.end(Wonton::Entity_kind::CELL),
		    sources_and_weights.begin(),
		    outvals.begin(), interpolator);
  
  // Make sure we retrieved the correct value for each cell on the target
  const double stdval = data[0];
  std::cout << "ncells_target: " << ncells_target << std::endl;
  for (int c = 0; c < ncells_target; ++c)
    std::cout << outvals[c] << " ";
  std::cout << std::endl;
  
  double sum2 = 0;
  for (int i=0; i<outvals.size(); i++)
    sum2 += outvals[i]*0.2*0.2;
  std::cout << "target mass total: " << sum2 << std::endl;
  

  export_vtk(5,"target.vtk",outvals);
  
}
