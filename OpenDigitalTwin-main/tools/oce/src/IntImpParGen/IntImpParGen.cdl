-- Created on: 1992-03-02
-- Created by: Laurent BUCHARD
-- Copyright (c) 1992-1999 Matra Datavision
-- Copyright (c) 1999-2014 OPEN CASCADE SAS
--
-- This file is part of Open CASCADE Technology software library.
--
-- This library is free software; you can redistribute it and/or modify it under
-- the terms of the GNU Lesser General Public License version 2.1 as published
-- by the Free Software Foundation, with special exception defined in the file
-- OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
-- distribution for complete text of the license and disclaimer of any warranty.
--
-- Alternatively, this file may be used under the terms of Open CASCADE
-- commercial license or contractual agreement.

package IntImpParGen


    ---Purpose: Gives a generic algorithm to intersect Implicit Curves
    --          and Bounded Parametric Curves. 
    --      
    --  Level: Internal
    --
    -- All the methods of all the classes are Internal.
    

uses Standard, TColStd, gp, math, IntRes2d, StdFail

is 

    deferred class ImpTool;
    ---Purpose: Template class for an implicit  curve.
    
    generic class ImpParTool;
    ---Purpose: Math function, instantiated inside the Intersector.

    generic class Intersector,MyImpParTool;
    
    
    ---Purpose: Tool used by the package IntCurve and IntImpParGen
    
    DetermineTransition(Pos1  :          Position    from IntRes2d;
    	                Tan1  : in out   Vec2d       from gp;
			Norm1 :          Vec2d       from gp;
			Trans1: in out   Transition  from IntRes2d;
			Pos2  :          Position    from IntRes2d;
    	                Tan2  : in out   Vec2d       from gp;
			Norm2 :          Vec2d       from gp;
			Trans2: in out   Transition  from IntRes2d;
                        Tol   :          Real        from Standard);
			
    DetermineTransition(Pos1  :          Position    from IntRes2d;
    	                Tan1  : in out   Vec2d       from gp;
			Trans1: in out   Transition  from IntRes2d;
			Pos2  :          Position    from IntRes2d;
    	                Tan2  : in out   Vec2d       from gp;
			Trans2: in out   Transition  from IntRes2d;
                        Tol   :          Real        from Standard)
    returns Boolean from Standard;
			
    DeterminePosition(  Pos1  : in out   Position    from IntRes2d; 
                        Dom1  :          Domain      from IntRes2d;
			P1    :          Pnt2d       from gp;
			Tol   :          Real        from Standard);
			
    NormalizeOnDomain(  Par1  : in out   Real        from Standard;
                        Dom1  :          Domain      from IntRes2d)
			
           returns Real from Standard;
						

end IntImpParGen;

