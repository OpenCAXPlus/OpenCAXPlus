// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Transfer_TransientProcess_HeaderFile
#define _Transfer_TransientProcess_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Transfer_TransientProcess.hxx>

#include <Handle_Interface_InterfaceModel.hxx>
#include <Handle_Interface_HGraph.hxx>
#include <Handle_Dico_DictionaryOfTransient.hxx>
#include <Handle_TColStd_HSequenceOfTransient.hxx>
#include <Transfer_ProcessForTransient.hxx>
#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <Standard_CString.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_Standard_Type.hxx>
#include <Handle_Message_Messenger.hxx>
class Interface_InterfaceModel;
class Interface_HGraph;
class Dico_DictionaryOfTransient;
class TColStd_HSequenceOfTransient;
class Interface_Graph;
class Standard_Transient;
class Standard_Type;
class Message_Messenger;
class Interface_EntityIterator;


//! Adds specific features to the generic definition :
//! TransientProcess is intended to work from an InterfaceModel
//! to a set of application objects.
//!
//! Hence, some informations about starting entities can be gotten
//! from the model : for Trace, CheckList, Integrity Status
class Transfer_TransientProcess : public Transfer_ProcessForTransient
{

public:

  
  //! Sets TransientProcess at initial state, with an initial size
  Standard_EXPORT Transfer_TransientProcess(const Standard_Integer nb = 10000);
  
  //! Sets an InterfaceModel, used by StartTrace, CheckList, queries
  //! on Integrity, to give informations significant for each norm.
  Standard_EXPORT   void SetModel (const Handle(Interface_InterfaceModel)& model) ;
  
  //! Returns the Model used for StartTrace
  Standard_EXPORT   Handle(Interface_InterfaceModel) Model()  const;
  
  //! Sets a Graph : superseedes SetModel if already done
  Standard_EXPORT   void SetGraph (const Handle(Interface_HGraph)& HG) ;
  
  Standard_EXPORT   Standard_Boolean HasGraph()  const;
  
  Standard_EXPORT   Handle(Interface_HGraph) HGraph()  const;
  
  Standard_EXPORT  const  Interface_Graph& Graph()  const;
  
  //! Sets a Context : according to receiving appli, to be
  //! interpreted by the Actor
  Standard_EXPORT   void SetContext (const Standard_CString name, const Handle(Standard_Transient)& ctx) ;
  
  //! Returns the Context attached to a name, if set and if it is
  //! Kind of the type, else a Null Handle
  //! Returns True if OK, False if no Context
  Standard_EXPORT   Standard_Boolean GetContext (const Standard_CString name, const Handle(Standard_Type)& type, Handle(Standard_Transient)& ctx)  const;
  
  //! Returns (modifiable) the whole definition of Context
  //! Rather for internal use (ex.: preparing and setting in once)
  Standard_EXPORT   Handle(Dico_DictionaryOfTransient)& Context() ;
  
  //! Specific printing to trace an entity : prints label and type
  //! (if model is set)
  Standard_EXPORT virtual   void PrintTrace (const Handle(Standard_Transient)& start, const Handle(Message_Messenger)& S)  const;
  
  //! Specific number of a starting object for check-list : Number
  //! in model
  Standard_EXPORT virtual   Standard_Integer CheckNum (const Handle(Standard_Transient)& ent)  const;
  
  //! Returns the list of sharings entities, AT ANY LEVEL, which are
  //! kind of a given type. Calls TypedSharings from Graph
  //! Returns an empty list if the Graph has not been aknowledged
  Standard_EXPORT   Interface_EntityIterator TypedSharings (const Handle(Standard_Transient)& start, const Handle(Standard_Type)& type)  const;
  
  //! Tells if an entity is well loaded from file (even if its data
  //! fail on checking, they are present). Mostly often, answers
  //! True. Else, there was a syntactic error in the file.
  //! A non-loaded entity MAY NOT BE transferred, unless its Report
  //! (in the model) is interpreted
  Standard_EXPORT   Standard_Boolean IsDataLoaded (const Handle(Standard_Transient)& ent)  const;
  
  //! Tells if an entity fails on data checking (load time,
  //! syntactic, or semantic check). Normally, should answer False.
  //! It is not prudent to try transferring an entity which fails on
  //! data checking
  Standard_EXPORT   Standard_Boolean IsDataFail (const Handle(Standard_Transient)& ent)  const;
  
  //! Prints statistics on a given output, according mode
  Standard_EXPORT   void PrintStats (const Standard_Integer mode, const Handle(Message_Messenger)& S)  const;
  
  Standard_EXPORT   Handle(TColStd_HSequenceOfTransient) RootsForTransfer() ;




  DEFINE_STANDARD_RTTI(Transfer_TransientProcess)

protected:




private: 


  Handle(Interface_InterfaceModel) themodel;
  Handle(Interface_HGraph) thegraph;
  Handle(Dico_DictionaryOfTransient) thectx;
  Handle(TColStd_HSequenceOfTransient) thetrroots;


};







#endif // _Transfer_TransientProcess_HeaderFile
