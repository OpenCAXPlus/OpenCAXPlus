// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TDataStd_ReferenceArray_HeaderFile
#define _TDataStd_ReferenceArray_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_TDataStd_ReferenceArray.hxx>

#include <Handle_TDataStd_HLabelArray1.hxx>
#include <TDF_Attribute.hxx>
#include <Standard_Integer.hxx>
#include <TDF_Label.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_TDF_Attribute.hxx>
#include <Handle_TDF_RelocationTable.hxx>
#include <Handle_TDF_DataSet.hxx>
#include <Standard_OStream.hxx>
class TDataStd_HLabelArray1;
class Standard_GUID;
class TDF_Label;
class TDF_Attribute;
class TDF_RelocationTable;
class TDF_DataSet;


//! Contains an array of references to the labels.
class TDataStd_ReferenceArray : public TDF_Attribute
{

public:

  
  //! Static methods
  //! ==============
  //! Returns the ID of the array of references (labels) attribute.
  Standard_EXPORT static  const  Standard_GUID& GetID() ;
  
  //! Finds or creates an array of reference values (labels) attribute.
  Standard_EXPORT static   Handle(TDataStd_ReferenceArray) Set (const TDF_Label& label, const Standard_Integer lower, const Standard_Integer upper) ;
  
  //! Initialize the inner array with bounds from <lower> to <upper>
  Standard_EXPORT   void Init (const Standard_Integer lower, const Standard_Integer upper) ;
  
  //! Sets the <Index>th element of the array to <Value>
  //! OutOfRange exception is raised if <Index> doesn't respect Lower and Upper bounds of the internal  array.
  Standard_EXPORT   void SetValue (const Standard_Integer index, const TDF_Label& value) ;
  
  //! Returns the value of the <Index>th element of the array.
  Standard_EXPORT   TDF_Label Value (const Standard_Integer Index)  const;
  TDF_Label operator () (const Standard_Integer Index)  const
{
  return Value(Index);
}
  
  //! Returns the lower boundary of the array.
  Standard_EXPORT   Standard_Integer Lower()  const;
  
  //! Returns the upper boundary of the array.
  Standard_EXPORT   Standard_Integer Upper()  const;
  
  //! Returns the number of elements in the array.
  Standard_EXPORT   Standard_Integer Length()  const;
  
  Standard_EXPORT  const  Handle(TDataStd_HLabelArray1)& InternalArray()  const;
  
  Standard_EXPORT   void SetInternalArray (const Handle(TDataStd_HLabelArray1)& values, const Standard_Boolean isCheckItems = Standard_True) ;
  
  Standard_EXPORT TDataStd_ReferenceArray();
  
  Standard_EXPORT  const  Standard_GUID& ID()  const;
  
  Standard_EXPORT   void Restore (const Handle(TDF_Attribute)& With) ;
  
  Standard_EXPORT   Handle(TDF_Attribute) NewEmpty()  const;
  
  Standard_EXPORT   void Paste (const Handle(TDF_Attribute)& Into, const Handle(TDF_RelocationTable)& RT)  const;
  
  Standard_EXPORT virtual   void References (const Handle(TDF_DataSet)& DS)  const;
  
  Standard_EXPORT virtual   Standard_OStream& Dump (Standard_OStream& anOS)  const;




  DEFINE_STANDARD_RTTI(TDataStd_ReferenceArray)

protected:




private: 


  Handle(TDataStd_HLabelArray1) myArray;


};







#endif // _TDataStd_ReferenceArray_HeaderFile
