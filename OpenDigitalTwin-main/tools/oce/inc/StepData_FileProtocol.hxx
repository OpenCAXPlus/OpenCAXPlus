// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StepData_FileProtocol_HeaderFile
#define _StepData_FileProtocol_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_StepData_FileProtocol.hxx>

#include <TColStd_SequenceOfTransient.hxx>
#include <StepData_Protocol.hxx>
#include <Handle_StepData_Protocol.hxx>
#include <Standard_Integer.hxx>
#include <Handle_Interface_Protocol.hxx>
#include <Handle_Standard_Type.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_Interface_Check.hxx>
#include <Standard_CString.hxx>
class StepData_Protocol;
class Interface_Protocol;
class Standard_Type;
class Interface_Graph;
class Interface_Check;


//! A FileProtocol is defined as the addition of several already
//! existing Protocols. It corresponds to the definition of a
//! SchemaName with several Names, each one being attached to a
//! specific Protocol. Thus, a File defined with a compound Schema
//! is processed as any other one, once built the equivalent
//! compound Protocol, a FileProtocol
class StepData_FileProtocol : public StepData_Protocol
{

public:

  
  //! Creates an empty FileProtocol
  Standard_EXPORT StepData_FileProtocol();
  
  //! Adds a Protocol to the definition list of the FileProtocol
  //! But ensures that each class of Protocol is present only once
  //! in this list
  Standard_EXPORT   void Add (const Handle(StepData_Protocol)& protocol) ;
  
  //! Gives the count of Protocols used as Resource (can be zero)
  //! i.e. the count of Protocol recorded by calling the method Add
  Standard_EXPORT virtual   Standard_Integer NbResources()  const;
  
  //! Returns a Resource, given a rank. Here, rank of calling Add
  Standard_EXPORT virtual   Handle(Interface_Protocol) Resource (const Standard_Integer num)  const;
  
  //! Returns a Case Number, specific of each recognized Type
  //! Here, NO Type at all is recognized properly : all Types are
  //! recognized by the resources
  Standard_EXPORT virtual   Standard_Integer TypeNumber (const Handle(Standard_Type)& atype)  const;
  
  //! Calls GlobalCheck for each of its recorded ressources
  Standard_EXPORT virtual   Standard_Boolean GlobalCheck (const Interface_Graph& G, Handle(Interface_Check)& ach)  const;
  
  //! Returns the Schema Name attached to each class of Protocol
  //! To be redefined by each sub-class
  //! Here, SchemaName returns "" (empty String)
  //! was C++ : return const
  Standard_EXPORT virtual   Standard_CString SchemaName()  const;




  DEFINE_STANDARD_RTTI(StepData_FileProtocol)

protected:




private: 


  TColStd_SequenceOfTransient thecomps;


};







#endif // _StepData_FileProtocol_HeaderFile
