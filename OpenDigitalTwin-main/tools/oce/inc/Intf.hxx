// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Intf_HeaderFile
#define _Intf_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineAlloc.hxx>
#include <Standard_Macro.hxx>

#include <Standard_Real.hxx>
#include <Standard_Boolean.hxx>
class gp_Pnt;
class gp_XYZ;
class Intf_Polygon2d;
class Intf_Array1OfLin;
class Intf_SectionPoint;
class Intf_SeqOfSectionPoint;
class Intf_SectionLine;
class Intf_SeqOfSectionLine;
class Intf_TangentZone;
class Intf_SeqOfTangentZone;
class Intf_Interference;
class Intf_Tool;
class Intf_InterferencePolygon2d;
class Intf_InterferencePolygonPolyhedron;
class Intf_SequenceNodeOfSeqOfSectionPoint;
class Intf_SequenceNodeOfSeqOfTangentZone;
class Intf_SequenceNodeOfSeqOfSectionLine;


//! Interference computation  between polygons, lines  and
//! polyhedra with only  triangular  facets. These objects
//! are polygonal  representations of complex   curves and
//! triangulated representations of complex surfaces.
class Intf 
{
public:

  DEFINE_STANDARD_ALLOC

  
  //! Computes   the  interference between   two polygons in  2d.
  //! Result : points of intersections and zones of tangence.
  //! Computes the interference  between a polygon or  a straight
  //! line and a polyhedron.   Points of intersection  and zones
  //! of tangence.
  //! Give the plane equation of the triangle <P1> <P2> <P3>.
  Standard_EXPORT static   void PlaneEquation (const gp_Pnt& P1, const gp_Pnt& P2, const gp_Pnt& P3, gp_XYZ& NormalVector, Standard_Real& PolarDistance) ;
  
  //! Compute if the triangle <P1> <P2> <P3> contain <ThePnt>.
  Standard_EXPORT static   Standard_Boolean Contain (const gp_Pnt& P1, const gp_Pnt& P2, const gp_Pnt& P3, const gp_Pnt& ThePnt) ;




protected:





private:




friend class Intf_Polygon2d;
friend class Intf_Array1OfLin;
friend class Intf_SectionPoint;
friend class Intf_SeqOfSectionPoint;
friend class Intf_SectionLine;
friend class Intf_SeqOfSectionLine;
friend class Intf_TangentZone;
friend class Intf_SeqOfTangentZone;
friend class Intf_Interference;
friend class Intf_Tool;
friend class Intf_InterferencePolygon2d;
friend class Intf_InterferencePolygonPolyhedron;
friend class Intf_SequenceNodeOfSeqOfSectionPoint;
friend class Intf_SequenceNodeOfSeqOfTangentZone;
friend class Intf_SequenceNodeOfSeqOfSectionLine;

};







#endif // _Intf_HeaderFile
