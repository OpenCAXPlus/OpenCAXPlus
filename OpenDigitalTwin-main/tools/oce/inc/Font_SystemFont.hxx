// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Font_SystemFont_HeaderFile
#define _Font_SystemFont_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Font_SystemFont.hxx>

#include <Handle_TCollection_HAsciiString.hxx>
#include <Font_FontAspect.hxx>
#include <Standard_Integer.hxx>
#include <Standard_Boolean.hxx>
#include <MMgt_TShared.hxx>
class TCollection_HAsciiString;


//! Structure for store of Font System Information
class Font_SystemFont : public MMgt_TShared
{

public:

  
  //! Creates empty font object
  Standard_EXPORT Font_SystemFont();
  
  //! Creates Font object initialized with <FontName> as name
  //! <FontAspect>.... TODO
  Standard_EXPORT Font_SystemFont(const Handle(TCollection_HAsciiString)& theFontName, const Font_FontAspect theFontAspect, const Handle(TCollection_HAsciiString)& theFilePath);
  
  //! Creates Font object and initialize class fields with
  //! values taken from XLFD (X Logical Font Description)
  Standard_EXPORT Font_SystemFont(const Handle(TCollection_HAsciiString)& theXLFD, const Handle(TCollection_HAsciiString)& theFilePath);
  
  //! Returns font family name
  Standard_EXPORT   Handle(TCollection_HAsciiString) FontName()  const;
  
  //! Returns font file path
  //! Level: Public
  Standard_EXPORT   Handle(TCollection_HAsciiString) FontPath()  const;
  
  //! Returns font aspect
  //! Level: Public
  Standard_EXPORT   Font_FontAspect FontAspect()  const;
  
  //! Returns font height
  //! If returned value is equal -1 it means that font is resizable
  //! Level: Public
  Standard_EXPORT   Standard_Integer FontHeight()  const;
  
  Standard_EXPORT   Standard_Boolean IsValid()  const;
  
  //! Return true if the FontName, FontAspect and FontSize are the same.
  //! Level: Public
  Standard_EXPORT   Standard_Boolean IsEqual (const Handle(Font_SystemFont)& theOtherFont)  const;




  DEFINE_STANDARD_RTTI(Font_SystemFont)

protected:




private: 


  Handle(TCollection_HAsciiString) MyFontName;
  Font_FontAspect MyFontAspect;
  Standard_Integer MyFaceSize;
  Handle(TCollection_HAsciiString) MyFilePath;
  Standard_Boolean MyVerification;


};







#endif // _Font_SystemFont_HeaderFile
