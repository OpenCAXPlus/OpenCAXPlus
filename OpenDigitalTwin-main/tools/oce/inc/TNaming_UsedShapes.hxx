// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TNaming_UsedShapes_HeaderFile
#define _TNaming_UsedShapes_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_TNaming_UsedShapes.hxx>

#include <TNaming_DataMapOfShapePtrRefShape.hxx>
#include <TDF_Attribute.hxx>
#include <Handle_TDF_Attribute.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_TDF_AttributeDelta.hxx>
#include <Handle_TDF_DeltaOnAddition.hxx>
#include <Handle_TDF_DeltaOnRemoval.hxx>
#include <Handle_TDF_RelocationTable.hxx>
#include <Handle_TDF_DataSet.hxx>
#include <Standard_OStream.hxx>
class TNaming_Builder;
class TNaming_DataMapOfShapePtrRefShape;
class Standard_GUID;
class TDF_Attribute;
class TDF_AttributeDelta;
class TDF_DeltaOnAddition;
class TDF_DeltaOnRemoval;
class TDF_RelocationTable;
class TDF_DataSet;


//! Global attribute located under root label to store all
//! the shapes handled by the framework
//! Set of Shapes Used in a Data from TDF
//! Only one instance by Data, it always
//! Stored as Attribute of The Root.
class TNaming_UsedShapes : public TDF_Attribute
{

public:

  
  Standard_EXPORT   void Destroy() ;
~TNaming_UsedShapes()
{
  Destroy();
}
  
      TNaming_DataMapOfShapePtrRefShape& Map() ;
  
  //! Returns the ID of the attribute.
     const  Standard_GUID& ID()  const;
  
  //! Returns the ID: 2a96b614-ec8b-11d0-bee7-080009dc3333.
  Standard_EXPORT static  const  Standard_GUID& GetID() ;
  
  //! Copies  the attribute  contents into  a  new other
  //! attribute. It is used by Backup().
  Standard_EXPORT virtual   Handle(TDF_Attribute) BackupCopy()  const;
  
  //! Restores the contents from <anAttribute> into this
  //! one. It is used when aborting a transaction.
  Standard_EXPORT virtual   void Restore (const Handle(TDF_Attribute)& anAttribute) ;
  
  //! Clears the table.
  Standard_EXPORT virtual   void BeforeRemoval() ;
  
  //! Something to do after applying <anAttDelta>.
  Standard_EXPORT virtual   Standard_Boolean AfterUndo (const Handle(TDF_AttributeDelta)& anAttDelta, const Standard_Boolean forceIt = Standard_False) ;
  
  //! this method returns a null handle (no delta).
  Standard_EXPORT virtual   Handle(TDF_DeltaOnAddition) DeltaOnAddition()  const;
  
  //! this method returns a null handle (no delta).
  Standard_EXPORT virtual   Handle(TDF_DeltaOnRemoval) DeltaOnRemoval()  const;
  
  //! Returns an new empty attribute from the good end
  //! type. It is used by the copy algorithm.
  Standard_EXPORT virtual   Handle(TDF_Attribute) NewEmpty()  const;
  
  //! This method is different from the "Copy" one,
  //! because it is used when copying an attribute from
  //! a source structure into a target structure. This
  //! method pastes the current attribute to the label
  //! corresponding to the insertor. The pasted
  //! attribute may be a brand new one or a new version
  //! of the previous one.
  Standard_EXPORT virtual   void Paste (const Handle(TDF_Attribute)& intoAttribute, const Handle(TDF_RelocationTable)& aRelocTationable)  const;
  
  //! Adds the directly referenced attributes and labels
  //! to <aDataSet>. "Directly" means we have only to
  //! look at the first level of references.
  //!
  //! For this, use only the AddLabel() & AddAttribute()
  //! from DataSet and do not try to modify information
  //! previously stored in <aDataSet>.
  Standard_EXPORT virtual   void References (const Handle(TDF_DataSet)& aDataSet)  const;
  
  //! Dumps the attribute on <aStream>.
  Standard_EXPORT virtual   Standard_OStream& Dump (Standard_OStream& anOS)  const;

friend class TNaming_Builder;


  DEFINE_STANDARD_RTTI(TNaming_UsedShapes)

protected:




private: 

  
  Standard_EXPORT TNaming_UsedShapes();

  TNaming_DataMapOfShapePtrRefShape myMap;


};


#include <TNaming_UsedShapes.lxx>





#endif // _TNaming_UsedShapes_HeaderFile
