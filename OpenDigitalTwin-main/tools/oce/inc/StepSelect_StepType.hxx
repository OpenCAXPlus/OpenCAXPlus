// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StepSelect_StepType_HeaderFile
#define _StepSelect_StepType_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_StepSelect_StepType.hxx>

#include <Handle_StepData_Protocol.hxx>
#include <StepData_WriterLib.hxx>
#include <IFSelect_Signature.hxx>
#include <Handle_Interface_Protocol.hxx>
#include <Standard_CString.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_Interface_InterfaceModel.hxx>
class StepData_Protocol;
class Interface_InterfaceError;
class Interface_Protocol;
class Standard_Transient;
class Interface_InterfaceModel;


//! StepType is a Signature specific to Step definitions : it
//! considers the type as defined in STEP Schemas, the same which
//! is used in files.
//! For a Complex Type, if its definition is known, StepType
//! produces the list of basic types, separated by commas, the
//! whole between brackets : "(TYPE1,TYPE2..)".
//! If its precise definition is not known (simply it is known as
//! Complex, it can be recognised, but the list is produced at
//! Write time only), StepType produces : "(..COMPLEX TYPE..)"
class StepSelect_StepType : public IFSelect_Signature
{

public:

  
  //! Creates a Signature for Step Type. Protocol is undefined here,
  //! hence no Signature may yet be produced. The StepType signature
  //! requires a Protocol before working
  Standard_EXPORT StepSelect_StepType();
  
  //! Sets the StepType signature to work with a Protocol : this
  //! initialises the library
  Standard_EXPORT   void SetProtocol (const Handle(Interface_Protocol)& proto) ;
  
  //! Returns the Step Type defined from the Protocol (see above).
  //! If <ent> is not recognised, produces "..NOT FROM SCHEMA <name>.."
  Standard_EXPORT   Standard_CString Value (const Handle(Standard_Transient)& ent, const Handle(Interface_InterfaceModel)& model)  const;




  DEFINE_STANDARD_RTTI(StepSelect_StepType)

protected:


  StepData_WriterLib thelib;


private: 


  Handle(StepData_Protocol) theproto;


};







#endif // _StepSelect_StepType_HeaderFile
