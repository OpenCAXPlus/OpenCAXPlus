// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Transfer_ActorOfProcessForFinder_HeaderFile
#define _Transfer_ActorOfProcessForFinder_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Transfer_ActorOfProcessForFinder.hxx>

#include <Handle_Transfer_ActorOfProcessForFinder.hxx>
#include <Standard_Boolean.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_Transfer_Finder.hxx>
#include <Handle_Transfer_HSequenceOfFinder.hxx>
#include <Handle_Transfer_ProcessForFinder.hxx>
#include <Handle_Transfer_IndexedDataMapNodeOfTransferMapOfProcessForFinder.hxx>
#include <Handle_Transfer_Binder.hxx>
#include <Handle_Transfer_SimpleBinderOfTransient.hxx>
#include <Handle_Standard_Transient.hxx>
class Standard_DomainError;
class Transfer_Finder;
class Transfer_FindHasher;
class Transfer_HSequenceOfFinder;
class Transfer_ProcessForFinder;
class Transfer_TransferMapOfProcessForFinder;
class Transfer_IndexedDataMapNodeOfTransferMapOfProcessForFinder;
class Transfer_IteratorOfProcessForFinder;
class Transfer_Binder;
class Transfer_SimpleBinderOfTransient;
class Standard_Transient;



class Transfer_ActorOfProcessForFinder : public MMgt_TShared
{

public:

  
  Standard_EXPORT Transfer_ActorOfProcessForFinder();
  
  Standard_EXPORT virtual   Standard_Boolean Recognize (const Handle(Transfer_Finder)& start) ;
  
  Standard_EXPORT virtual   Handle(Transfer_Binder) Transferring (const Handle(Transfer_Finder)& start, const Handle(Transfer_ProcessForFinder)& TP) ;
  
  Standard_EXPORT   Handle(Transfer_SimpleBinderOfTransient) TransientResult (const Handle(Standard_Transient)& res)  const;
  
  Standard_EXPORT   Handle(Transfer_Binder) NullResult()  const;
  
  Standard_EXPORT   void SetLast (const Standard_Boolean mode = Standard_True) ;
  
  Standard_EXPORT   Standard_Boolean IsLast()  const;
  
  Standard_EXPORT   void SetNext (const Handle(Transfer_ActorOfProcessForFinder)& next) ;
  
  Standard_EXPORT   Handle(Transfer_ActorOfProcessForFinder) Next()  const;




  DEFINE_STANDARD_RTTI(Transfer_ActorOfProcessForFinder)

protected:




private: 


  Handle(Transfer_ActorOfProcessForFinder) thenext;
  Standard_Boolean thelast;


};







#endif // _Transfer_ActorOfProcessForFinder_HeaderFile
