// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IFSelect_SelectInList_HeaderFile
#define _IFSelect_SelectInList_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_IFSelect_SelectInList.hxx>

#include <IFSelect_SelectAnyList.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Standard_Integer.hxx>
class Standard_OutOfRange;
class Standard_Transient;
class Interface_EntityIterator;


//! A SelectInList kind Selection selects a List of an Entity,
//! which is composed of single Entities
//! To know the list on which to work, SelectInList has two
//! deferred methods : NbItems (inherited from SelectAnyList) and
//! ListedEntity (which gives an item as an Entity) which must be
//! defined to get a List in an Entity of the required Type (and
//! consider that list is empty if Entity has not required Type)
//!
//! As for SelectAnyList, if a type of Entity defines several
//! lists, a given sub-class of SelectInList is attached on one
class IFSelect_SelectInList : public IFSelect_SelectAnyList
{

public:

  
  //! Returns an Entity, given its rank in the list
  Standard_EXPORT virtual   Handle(Standard_Transient) ListedEntity (const Standard_Integer num, const Handle(Standard_Transient)& ent)  const = 0;
  
  //! Puts into the result, the sub-entities of the list, from n1 to
  //! n2 included. Remark that adequation with Entity's type and
  //! length of list has already been made at this stage
  //! Called by RootResult; calls ListedEntity (see below)
  Standard_EXPORT   void FillResult (const Standard_Integer n1, const Standard_Integer n2, const Handle(Standard_Transient)& ent, Interface_EntityIterator& result)  const;




  DEFINE_STANDARD_RTTI(IFSelect_SelectInList)

protected:




private: 




};







#endif // _IFSelect_SelectInList_HeaderFile
