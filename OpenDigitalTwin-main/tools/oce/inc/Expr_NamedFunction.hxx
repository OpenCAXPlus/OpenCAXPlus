// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Expr_NamedFunction_HeaderFile
#define _Expr_NamedFunction_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Expr_NamedFunction.hxx>

#include <TCollection_AsciiString.hxx>
#include <Handle_Expr_GeneralExpression.hxx>
#include <Expr_Array1OfNamedUnknown.hxx>
#include <Expr_GeneralFunction.hxx>
#include <Standard_Integer.hxx>
#include <Handle_Expr_NamedUnknown.hxx>
#include <Standard_Real.hxx>
#include <Handle_Expr_GeneralFunction.hxx>
#include <Standard_Boolean.hxx>
class Expr_GeneralExpression;
class Standard_OutOfRange;
class Standard_DimensionMismatch;
class Standard_NumericError;
class Expr_NotEvaluable;
class TCollection_AsciiString;
class Expr_Array1OfNamedUnknown;
class Expr_NamedUnknown;
class TColStd_Array1OfReal;
class Expr_GeneralFunction;



class Expr_NamedFunction : public Expr_GeneralFunction
{

public:

  
  //! Creates a function of given variables <vars> with name
  //! <name> defined by the expression <exp>.
  Standard_EXPORT Expr_NamedFunction(const TCollection_AsciiString& name, const Handle(Expr_GeneralExpression)& exp, const Expr_Array1OfNamedUnknown& vars);
  
  //! Sets the name <newname> to <me>.
  Standard_EXPORT   void SetName (const TCollection_AsciiString& newname) ;
  
  //! Returns the name assigned to <me>
  Standard_EXPORT   TCollection_AsciiString GetName()  const;
  
  //! Returns the number of variables of <me>.
  Standard_EXPORT   Standard_Integer NbOfVariables()  const;
  
  //! Returns the variable denoted by <index> in <me>.
  //! Raises OutOfRange if <index> is greater than
  //! NbOfVariables of <me>, or less than or equal to zero.
  Standard_EXPORT   Handle(Expr_NamedUnknown) Variable (const Standard_Integer index)  const;
  
  //! Computes the value of <me> with the given variables.
  //! Raises DimensionMismatch if Length(vars) is different from
  //! Length(values).
  Standard_EXPORT   Standard_Real Evaluate (const Expr_Array1OfNamedUnknown& vars, const TColStd_Array1OfReal& values)  const;
  
  //! Returns a copy of <me> with the same form.
  Standard_EXPORT   Handle(Expr_GeneralFunction) Copy()  const;
  
  //! Returns Derivative of <me> for variable <var>.
  Standard_EXPORT   Handle(Expr_GeneralFunction) Derivative (const Handle(Expr_NamedUnknown)& var)  const;
  
  //! Returns Derivative of <me> for variable <var> with
  //! degree <deg>.
  Standard_EXPORT   Handle(Expr_GeneralFunction) Derivative (const Handle(Expr_NamedUnknown)& var, const Standard_Integer deg)  const;
  
  //! Tests if <me> and <func> are similar functions (same
  //! name and same used expression).
  Standard_EXPORT   Standard_Boolean IsIdentical (const Handle(Expr_GeneralFunction)& func)  const;
  
  //! Tests if <me> is linear on variable on range <index>
  Standard_EXPORT   Standard_Boolean IsLinearOnVariable (const Standard_Integer index)  const;
  
  Standard_EXPORT   TCollection_AsciiString GetStringName()  const;
  
  //! Returns equivalent expression of <me>.
  Standard_EXPORT   Handle(Expr_GeneralExpression) Expression()  const;
  
  //! Modifies expression of <me>.
  //! Warning: Beware of derivatives. See FunctionDerivative
  Standard_EXPORT   void SetExpression (const Handle(Expr_GeneralExpression)& exp) ;




  DEFINE_STANDARD_RTTI(Expr_NamedFunction)

protected:




private: 


  TCollection_AsciiString myName;
  Handle(Expr_GeneralExpression) myExp;
  Expr_Array1OfNamedUnknown myVariables;


};







#endif // _Expr_NamedFunction_HeaderFile
