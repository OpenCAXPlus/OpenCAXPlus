// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Transfer_ActorDispatch_HeaderFile
#define _Transfer_ActorDispatch_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Transfer_ActorDispatch.hxx>

#include <Transfer_TransferDispatch.hxx>
#include <Transfer_ActorOfTransientProcess.hxx>
#include <Handle_Interface_InterfaceModel.hxx>
#include <Handle_Interface_Protocol.hxx>
#include <Handle_Transfer_ActorOfTransientProcess.hxx>
#include <Handle_Transfer_Binder.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_Transfer_TransientProcess.hxx>
class Interface_InterfaceError;
class Interface_InterfaceModel;
class Interface_GeneralLib;
class Interface_Protocol;
class Transfer_ActorOfTransientProcess;
class Transfer_TransferDispatch;
class Transfer_Binder;
class Standard_Transient;
class Transfer_TransientProcess;


//! This class allows to work with a TransferDispatch, i.e. to
//! transfer entities from a data set to another one defined by
//! the same interface norm, with the following features :
//! - ActorDispatch itself acts as a default actor, i.e. it copies
//! entities with the general service Copy, as CopyTool does
//! - it allows to add other actors for specific ways of transfer,
//! which may include data modifications, conversions ...
//! - and other features from TransferDispatch (such as mapping
//! other than one-one)
class Transfer_ActorDispatch : public Transfer_ActorOfTransientProcess
{

public:

  
  //! Creates an ActorDispatch from a Model. Works with a General
  //! Service Library, given as an Argument
  //! This causes TransferDispatch and its TransientProcess to be
  //! created, with default actor <me>
  Standard_EXPORT Transfer_ActorDispatch(const Handle(Interface_InterfaceModel)& amodel, const Interface_GeneralLib& lib);
  
  //! Same as above, but Library is defined through a Protocol
  Standard_EXPORT Transfer_ActorDispatch(const Handle(Interface_InterfaceModel)& amodel, const Handle(Interface_Protocol)& protocol);
  
  //! Same as above, but works with the Active Protocol
  Standard_EXPORT Transfer_ActorDispatch(const Handle(Interface_InterfaceModel)& amodel);
  
  //! Utility which adds an actor to the default <me> (it calls
  //! SetActor from the TransientProcess)
  Standard_EXPORT   void AddActor (const Handle(Transfer_ActorOfTransientProcess)& actor) ;
  
  //! Returns the TransferDispatch, which does the work, records
  //! the intermediate data, etc...
  //! See TransferDispatch & CopyTool, to see the available methods
  Standard_EXPORT   Transfer_TransferDispatch& TransferDispatch() ;
  
  //! Specific action : it calls the method Transfer from CopyTool
  //! i.e. the general service Copy, then returns the Binder
  //! produced by the TransientProcess
  Standard_EXPORT virtual   Handle(Transfer_Binder) Transfer (const Handle(Standard_Transient)& start, const Handle(Transfer_TransientProcess)& TP) ;




  DEFINE_STANDARD_RTTI(Transfer_ActorDispatch)

protected:




private: 


  Transfer_TransferDispatch thetool;


};







#endif // _Transfer_ActorDispatch_HeaderFile
