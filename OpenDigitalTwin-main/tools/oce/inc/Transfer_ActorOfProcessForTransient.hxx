// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Transfer_ActorOfProcessForTransient_HeaderFile
#define _Transfer_ActorOfProcessForTransient_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Transfer_ActorOfProcessForTransient.hxx>

#include <Handle_Transfer_ActorOfProcessForTransient.hxx>
#include <Standard_Boolean.hxx>
#include <MMgt_TShared.hxx>
#include <Handle_Standard_Transient.hxx>
#include <Handle_TColStd_HSequenceOfTransient.hxx>
#include <Handle_Transfer_ProcessForTransient.hxx>
#include <Handle_Transfer_IndexedDataMapNodeOfTransferMapOfProcessForTransient.hxx>
#include <Handle_Transfer_Binder.hxx>
#include <Handle_Transfer_SimpleBinderOfTransient.hxx>
class Standard_DomainError;
class Standard_Transient;
class TColStd_MapTransientHasher;
class TColStd_HSequenceOfTransient;
class Transfer_ProcessForTransient;
class Transfer_TransferMapOfProcessForTransient;
class Transfer_IndexedDataMapNodeOfTransferMapOfProcessForTransient;
class Transfer_IteratorOfProcessForTransient;
class Transfer_Binder;
class Transfer_SimpleBinderOfTransient;



class Transfer_ActorOfProcessForTransient : public MMgt_TShared
{

public:

  
  Standard_EXPORT Transfer_ActorOfProcessForTransient();
  
  Standard_EXPORT virtual   Standard_Boolean Recognize (const Handle(Standard_Transient)& start) ;
  
  Standard_EXPORT virtual   Handle(Transfer_Binder) Transferring (const Handle(Standard_Transient)& start, const Handle(Transfer_ProcessForTransient)& TP) ;
  
  Standard_EXPORT   Handle(Transfer_SimpleBinderOfTransient) TransientResult (const Handle(Standard_Transient)& res)  const;
  
  Standard_EXPORT   Handle(Transfer_Binder) NullResult()  const;
  
  Standard_EXPORT   void SetLast (const Standard_Boolean mode = Standard_True) ;
  
  Standard_EXPORT   Standard_Boolean IsLast()  const;
  
  Standard_EXPORT   void SetNext (const Handle(Transfer_ActorOfProcessForTransient)& next) ;
  
  Standard_EXPORT   Handle(Transfer_ActorOfProcessForTransient) Next()  const;




  DEFINE_STANDARD_RTTI(Transfer_ActorOfProcessForTransient)

protected:




private: 


  Handle(Transfer_ActorOfProcessForTransient) thenext;
  Standard_Boolean thelast;


};







#endif // _Transfer_ActorOfProcessForTransient_HeaderFile
