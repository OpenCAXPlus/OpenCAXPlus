// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Expr_PolyExpression_HeaderFile
#define _Expr_PolyExpression_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Expr_PolyExpression.hxx>

#include <Expr_SequenceOfGeneralExpression.hxx>
#include <Expr_GeneralExpression.hxx>
#include <Standard_Integer.hxx>
#include <Handle_Expr_GeneralExpression.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_Expr_NamedUnknown.hxx>
class Standard_OutOfRange;
class Standard_NumericError;
class Expr_InvalidOperand;
class Expr_GeneralExpression;
class Expr_NamedUnknown;



class Expr_PolyExpression : public Expr_GeneralExpression
{

public:

  
  //! returns the number of operands contained in <me>
  Standard_EXPORT   Standard_Integer NbOperands()  const;
  
  //! Returns the <index>-th operand used in <me>.
  //! An exception is raised if index is out of range
     const  Handle(Expr_GeneralExpression)& Operand (const Standard_Integer index)  const;
  
  //! Sets the <index>-th operand used in <me>.
  //! An exception is raised if <index> is out of range
  //! Raises InvalidOperand if <exp> contains <me>.
  Standard_EXPORT   void SetOperand (const Handle(Expr_GeneralExpression)& exp, const Standard_Integer index) ;
  
  //! returns the number of sub-expressions contained
  //! in <me> ( >= 2)
  Standard_EXPORT   Standard_Integer NbSubExpressions()  const;
  
  //! Returns the sub-expression denoted by <I> in <me>
  //! Raises OutOfRange if <I> > NbSubExpressions(me)
  Standard_EXPORT  const  Handle(Expr_GeneralExpression)& SubExpression (const Standard_Integer I)  const;
  
  //! Does <me> contains NamedUnknown ?
  Standard_EXPORT   Standard_Boolean ContainsUnknowns()  const;
  
  //! Tests if <exp> is contained in <me>.
  Standard_EXPORT   Standard_Boolean Contains (const Handle(Expr_GeneralExpression)& exp)  const;
  
  //! Replaces all occurences of <var> with <with> in <me>
  //! Raises InvalidOperand if <with> contains <me>.
  Standard_EXPORT   void Replace (const Handle(Expr_NamedUnknown)& var, const Handle(Expr_GeneralExpression)& with) ;
  
  //! Returns a GeneralExpression after replacement of
  //! NamedUnknowns by an associated expression and after
  //! values computation.
  Standard_EXPORT   Handle(Expr_GeneralExpression) Simplified()  const;




  DEFINE_STANDARD_RTTI(Expr_PolyExpression)

protected:

  
  //! initialize an empty list of operands.
  Standard_EXPORT Expr_PolyExpression();
  
  //! Adds an operand to the list of <me>.
  Standard_EXPORT   void AddOperand (const Handle(Expr_GeneralExpression)& exp) ;
  
  //! Remove the operand denoted by <index> from the list of
  //! <me>.
  //! Raises exception if <index> is out of range or if
  //! removing operand intend to leave only one or no
  //! operand.
  Standard_EXPORT   void RemoveOperand (const Standard_Integer index) ;



private: 


  Expr_SequenceOfGeneralExpression myOperands;


};


#include <Expr_PolyExpression.lxx>





#endif // _Expr_PolyExpression_HeaderFile
