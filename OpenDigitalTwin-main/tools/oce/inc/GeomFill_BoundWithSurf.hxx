// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GeomFill_BoundWithSurf_HeaderFile
#define _GeomFill_BoundWithSurf_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_GeomFill_BoundWithSurf.hxx>

#include <Adaptor3d_CurveOnSurface.hxx>
#include <Handle_Law_Function.hxx>
#include <GeomFill_Boundary.hxx>
#include <Standard_Real.hxx>
#include <Standard_Boolean.hxx>
class Law_Function;
class Adaptor3d_CurveOnSurface;
class gp_Pnt;
class gp_Vec;


//! Defines a 3d curve as a boundary for a
//! GeomFill_ConstrainedFilling algorithm.
//! This curve is attached to an existing surface.
//! Defines a  constrained boundary for  filling
//! the computations are done with a CurveOnSurf and a
//! normals field  defined by the normalized normal to
//! the surface along the PCurve.
//! Contains fields  to allow a reparametrization of curve
//! and normals field.
class GeomFill_BoundWithSurf : public GeomFill_Boundary
{

public:

  

  //! Constructs a boundary object defined by the 3d curve CurveOnSurf.
  //! The surface to be filled along this boundary will be in the
  //! tolerance range defined by Tol3d.
  //! What's more, at each point of CurveOnSurf, the angle
  //! between the normal to the surface to be filled along this
  //! boundary, and the normal to the surface on which
  //! CurveOnSurf lies, must not be greater than TolAng.
  //! This object is to be used as a boundary for a
  //! GeomFill_ConstrainedFilling framework.
  //! Warning
  //! CurveOnSurf is an adapted curve, that is, an object
  //! which is an interface between:
  //! -   the services provided by a curve lying on a surface from the package Geom
  //! -   and those required of the curve by the computation algorithm which uses it.
  //! The adapted curve is created in the following way:
  //! Handle(Geom_Surface) mySurface = ... ;
  //! Handle(Geom2d_Curve) myParamCurve = ... ;
  //! // where myParamCurve is a 2D curve in the parametric space of the surface mySurface
  //! Handle(GeomAdaptor_HSurface)
  //! Surface = new
  //! GeomAdaptor_HSurface(mySurface);
  //! Handle(Geom2dAdaptor_HCurve)
  //! ParamCurve = new
  //! Geom2dAdaptor_HCurve(myParamCurve);
  //! CurveOnSurf = Adaptor3d_CurveOnSurface(ParamCurve,Surface);
  //! The boundary is then constructed with the CurveOnSurf object:
  //! Standard_Real Tol = ... ;
  //! Standard_Real TolAng = ... ;
  //! myBoundary =  GeomFill_BoundWithSurf (
  //! CurveOnSurf, Tol, TolAng );
  Standard_EXPORT GeomFill_BoundWithSurf(const Adaptor3d_CurveOnSurface& CurveOnSurf, const Standard_Real Tol3d, const Standard_Real Tolang);
  
  Standard_EXPORT   gp_Pnt Value (const Standard_Real U)  const;
  
  Standard_EXPORT   void D1 (const Standard_Real U, gp_Pnt& P, gp_Vec& V)  const;
  
  Standard_EXPORT virtual   Standard_Boolean HasNormals()  const;
  
  Standard_EXPORT virtual   gp_Vec Norm (const Standard_Real U)  const;
  
  Standard_EXPORT virtual   void D1Norm (const Standard_Real U, gp_Vec& N, gp_Vec& DN)  const;
  
  Standard_EXPORT   void Reparametrize (const Standard_Real First, const Standard_Real Last, const Standard_Boolean HasDF, const Standard_Boolean HasDL, const Standard_Real DF, const Standard_Real DL, const Standard_Boolean Rev) ;
  
  Standard_EXPORT   void Bounds (Standard_Real& First, Standard_Real& Last)  const;
  
  Standard_EXPORT   Standard_Boolean IsDegenerated()  const;




  DEFINE_STANDARD_RTTI(GeomFill_BoundWithSurf)

protected:




private: 


  Adaptor3d_CurveOnSurface myConS;
  Handle(Law_Function) myPar;


};







#endif // _GeomFill_BoundWithSurf_HeaderFile
