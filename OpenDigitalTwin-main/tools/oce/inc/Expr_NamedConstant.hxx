// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Expr_NamedConstant_HeaderFile
#define _Expr_NamedConstant_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_Expr_NamedConstant.hxx>

#include <Standard_Real.hxx>
#include <Expr_NamedExpression.hxx>
#include <Standard_Integer.hxx>
#include <Handle_Expr_GeneralExpression.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_Expr_NamedUnknown.hxx>
class Standard_OutOfRange;
class TCollection_AsciiString;
class Expr_GeneralExpression;
class Expr_NamedUnknown;
class Expr_Array1OfNamedUnknown;
class TColStd_Array1OfReal;


//! Describes any numeric constant known by a special name
//! (as PI, e,...).
class Expr_NamedConstant : public Expr_NamedExpression
{

public:

  
  //! Creates a constant value of name <name> and value <value>.
  Standard_EXPORT Expr_NamedConstant(const TCollection_AsciiString& name, const Standard_Real value);
  
      Standard_Real GetValue()  const;
  
  //! returns the number of sub-expressions contained
  //! in <me> (always returns zero)
  Standard_EXPORT   Standard_Integer NbSubExpressions()  const;
  
  //! returns the <I>-th sub-expression of <me>
  //! raises OutOfRange
  Standard_EXPORT  const  Handle(Expr_GeneralExpression)& SubExpression (const Standard_Integer I)  const;
  
  //! returns a GeneralExpression after replacement of
  //! NamedUnknowns by an associated expression and after
  //! values computation.
  Standard_EXPORT   Handle(Expr_GeneralExpression) Simplified()  const;
  
  //! Returns a GeneralExpression after a simplification
  //! of the arguments of <me>.
  Standard_EXPORT   Handle(Expr_GeneralExpression) ShallowSimplified()  const;
  
  //! Returns a copy of <me> having the same unknowns and functions.
  Standard_EXPORT   Handle(Expr_GeneralExpression) Copy()  const;
  
  //! Tests if <me> contains NamedUnknown.
  //! (returns always False)
  Standard_EXPORT   Standard_Boolean ContainsUnknowns()  const;
  
  //! Tests if <exp> is contained in <me>.
  Standard_EXPORT   Standard_Boolean Contains (const Handle(Expr_GeneralExpression)& exp)  const;
  
  Standard_EXPORT   Standard_Boolean IsLinear()  const;
  
  //! Returns the derivative on <X> unknown of <me>
  Standard_EXPORT   Handle(Expr_GeneralExpression) Derivative (const Handle(Expr_NamedUnknown)& X)  const;
  
  //! Returns the <N>-th derivative on <X> unknown of <me>.
  //! Raises OutOfRange if <N> <= 0
  Standard_EXPORT virtual   Handle(Expr_GeneralExpression) NDerivative (const Handle(Expr_NamedUnknown)& X, const Standard_Integer N)  const;
  
  //! Replaces all occurences of <var> with <with> in <me>
  Standard_EXPORT   void Replace (const Handle(Expr_NamedUnknown)& var, const Handle(Expr_GeneralExpression)& with) ;
  
  //! Returns the value of <me> (as a Real) by
  //! replacement of <vars> by <vals>.
  Standard_EXPORT   Standard_Real Evaluate (const Expr_Array1OfNamedUnknown& vars, const TColStd_Array1OfReal& vals)  const;




  DEFINE_STANDARD_RTTI(Expr_NamedConstant)

protected:




private: 


  Standard_Real myValue;


};


#include <Expr_NamedConstant.lxx>





#endif // _Expr_NamedConstant_HeaderFile
