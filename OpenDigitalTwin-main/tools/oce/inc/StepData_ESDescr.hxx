// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StepData_ESDescr_HeaderFile
#define _StepData_ESDescr_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_StepData_ESDescr.hxx>

#include <TCollection_AsciiString.hxx>
#include <Handle_TColStd_HArray1OfTransient.hxx>
#include <Handle_Dico_DictionaryOfInteger.hxx>
#include <Handle_StepData_ESDescr.hxx>
#include <StepData_EDescr.hxx>
#include <Standard_CString.hxx>
#include <Standard_Integer.hxx>
#include <Handle_StepData_PDescr.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_StepData_Described.hxx>
class TColStd_HArray1OfTransient;
class Dico_DictionaryOfInteger;
class StepData_PDescr;
class TCollection_AsciiString;
class StepData_Described;


//! This class is intended to describe the authorized form for a
//! Simple (not Plex) Entity, as a list of fields
class StepData_ESDescr : public StepData_EDescr
{

public:

  
  //! Creates an ESDescr with a type name
  Standard_EXPORT StepData_ESDescr(const Standard_CString name);
  
  //! Sets a new count of fields
  //! Each one is described by a PDescr
  Standard_EXPORT   void SetNbFields (const Standard_Integer nb) ;
  
  //! Sets a PDescr to describe a field
  //! A Field is designated by its rank and name
  Standard_EXPORT   void SetField (const Standard_Integer num, const Standard_CString name, const Handle(StepData_PDescr)& descr) ;
  
  //! Sets an ESDescr as based on another one
  //! Hence, if there are inherited fields, the derived ESDescr
  //! cumulates all them, while the base just records its own ones
  Standard_EXPORT   void SetBase (const Handle(StepData_ESDescr)& base) ;
  
  //! Sets an ESDescr as "super-type". Applies an a base (non
  //! derived) ESDescr
  Standard_EXPORT   void SetSuper (const Handle(StepData_ESDescr)& super) ;
  
  //! Returns the type name given at creation time
  Standard_EXPORT   Standard_CString TypeName()  const;
  
  //! Returns the type name as an AsciiString
  Standard_EXPORT  const  TCollection_AsciiString& StepType()  const;
  
  //! Returns the basic ESDescr, null if <me> is not derived
  Standard_EXPORT   Handle(StepData_ESDescr) Base()  const;
  
  //! Returns the super-type ESDescr, null if <me> is root
  Standard_EXPORT   Handle(StepData_ESDescr) Super()  const;
  
  //! Tells if <me> is sub-type of (or equal to) another one
  Standard_EXPORT   Standard_Boolean IsSub (const Handle(StepData_ESDescr)& other)  const;
  
  //! Returns the count of fields
  Standard_EXPORT   Standard_Integer NbFields()  const;
  
  //! Returns the rank of a field from its name. 0 if unknown
  Standard_EXPORT   Standard_Integer Rank (const Standard_CString name)  const;
  
  //! Returns the name of a field from its rank. empty if outofrange
  Standard_EXPORT   Standard_CString Name (const Standard_Integer num)  const;
  
  //! Returns the PDescr for the field <num> (or Null)
  Standard_EXPORT   Handle(StepData_PDescr) Field (const Standard_Integer num)  const;
  
  //! Returns the PDescr for the field named <name> (or Null)
  Standard_EXPORT   Handle(StepData_PDescr) NamedField (const Standard_CString name)  const;
  
  //! Tells if a ESDescr matches a step type : exact or super type
  Standard_EXPORT   Standard_Boolean Matches (const Standard_CString steptype)  const;
  
  //! Returns False
  Standard_EXPORT   Standard_Boolean IsComplex()  const;
  
  //! Creates a described entity (i.e. a simple one)
  Standard_EXPORT   Handle(StepData_Described) NewEntity()  const;




  DEFINE_STANDARD_RTTI(StepData_ESDescr)

protected:




private: 


  TCollection_AsciiString thenom;
  Handle(TColStd_HArray1OfTransient) thedescr;
  Handle(Dico_DictionaryOfInteger) thenames;
  Handle(StepData_ESDescr) thebase;
  Handle(StepData_ESDescr) thesuper;


};







#endif // _StepData_ESDescr_HeaderFile
