// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IntRes2d_IntersectionPoint_HeaderFile
#define _IntRes2d_IntersectionPoint_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineAlloc.hxx>
#include <Standard_Macro.hxx>

#include <gp_Pnt2d.hxx>
#include <Standard_Real.hxx>
#include <IntRes2d_Transition.hxx>
#include <Standard_Storable.hxx>
#include <Standard_Boolean.hxx>
#include <Standard_PrimitiveTypes.hxx>
class gp_Pnt2d;
class IntRes2d_Transition;


Standard_EXPORT const Handle(Standard_Type)& STANDARD_TYPE(IntRes2d_IntersectionPoint);

//! Definition of an intersection point between two
//! 2D curves.
class IntRes2d_IntersectionPoint 
{

public:

  DEFINE_STANDARD_ALLOC

  
  //! Empty constructor.
  Standard_EXPORT IntRes2d_IntersectionPoint();
  
  //! Creates an IntersectionPoint.
  //! if ReversedFlag is False, the parameter Uc1(resp. Uc2)
  //! and the Transition Trans1 (resp. Trans2) refer to
  //! the first curve (resp. second curve) otherwise Uc1
  //! and Trans1 (resp. Uc2 and Trans2) refer to the
  //! second curve (resp. the first curve).
    IntRes2d_IntersectionPoint(const gp_Pnt2d& P, const Standard_Real Uc1, const Standard_Real Uc2, const IntRes2d_Transition& Trans1, const IntRes2d_Transition& Trans2, const Standard_Boolean ReversedFlag);
  
  //! Sets the values for an existing intersection
  //! point. The meaning of the parameters are the same
  //! as for the Create.
      void SetValues (const gp_Pnt2d& P, const Standard_Real Uc1, const Standard_Real Uc2, const IntRes2d_Transition& Trans1, const IntRes2d_Transition& Trans2, const Standard_Boolean ReversedFlag) ;
  
  //! Returns the value of the coordinates of the
  //! intersection point in the 2D space.
     const  gp_Pnt2d& Value()  const;
  
  //! Returns the parameter on the first curve.
      Standard_Real ParamOnFirst()  const;
  
  //! Returns the parameter on the second curve.
      Standard_Real ParamOnSecond()  const;
  
  //! Returns the transition of the 1st curve compared to
  //! the 2nd one.
     const  IntRes2d_Transition& TransitionOfFirst()  const;
  
  //! returns the transition of the 2nd curve compared to
  //! the 1st one.
     const  IntRes2d_Transition& TransitionOfSecond()  const;
    const gp_Pnt2d& _CSFDB_GetIntRes2d_IntersectionPointpt() const { return pt; }
    Standard_Real _CSFDB_GetIntRes2d_IntersectionPointp1() const { return p1; }
    void _CSFDB_SetIntRes2d_IntersectionPointp1(const Standard_Real p) { p1 = p; }
    Standard_Real _CSFDB_GetIntRes2d_IntersectionPointp2() const { return p2; }
    void _CSFDB_SetIntRes2d_IntersectionPointp2(const Standard_Real p) { p2 = p; }
    const IntRes2d_Transition& _CSFDB_GetIntRes2d_IntersectionPointtrans1() const { return trans1; }
    const IntRes2d_Transition& _CSFDB_GetIntRes2d_IntersectionPointtrans2() const { return trans2; }



protected:




private: 


  gp_Pnt2d pt;
  Standard_Real p1;
  Standard_Real p2;
  IntRes2d_Transition trans1;
  IntRes2d_Transition trans2;


};


#include <IntRes2d_IntersectionPoint.lxx>





#endif // _IntRes2d_IntersectionPoint_HeaderFile
