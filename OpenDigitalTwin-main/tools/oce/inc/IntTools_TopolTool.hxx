// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IntTools_TopolTool_HeaderFile
#define _IntTools_TopolTool_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_IntTools_TopolTool.hxx>

#include <Standard_Integer.hxx>
#include <Standard_Real.hxx>
#include <Adaptor3d_TopolTool.hxx>
#include <Handle_Adaptor3d_HSurface.hxx>
class Standard_DomainError;
class Adaptor3d_HSurface;
class gp_Pnt2d;
class gp_Pnt;


//! Class redefine methods of TopolTool from Adaptor3d
//! concerning sample points
class IntTools_TopolTool : public Adaptor3d_TopolTool
{

public:

  

  //! Empty constructor
  Standard_EXPORT IntTools_TopolTool();
  

  //! Initializes me by surface
  Standard_EXPORT IntTools_TopolTool(const Handle(Adaptor3d_HSurface)& theSurface);
  

  //! Redefined empty initializer
  //!
  //! Warning:
  //! Raises the exception NotImplemented
  Standard_EXPORT virtual   void Initialize() ;
  

  //! Initializes me by surface
  Standard_EXPORT virtual   void Initialize (const Handle(Adaptor3d_HSurface)& theSurface) ;
  
  Standard_EXPORT virtual   void ComputeSamplePoints() ;
  

  //! Computes the sample-points for the intersections algorithms
  Standard_EXPORT virtual   Standard_Integer NbSamplesU() ;
  

  //! Computes the sample-points for the intersections algorithms
  Standard_EXPORT virtual   Standard_Integer NbSamplesV() ;
  

  //! Computes the sample-points for the intersections algorithms
  Standard_EXPORT virtual   Standard_Integer NbSamples() ;
  

  //! Returns a 2d point from surface myS
  //! and a corresponded 3d point
  //! for given index.
  //! The index should be from 1 to NbSamples()
  Standard_EXPORT virtual   void SamplePoint (const Standard_Integer Index, gp_Pnt2d& P2d, gp_Pnt& P3d) ;
  
  //! compute the sample-points for the intersections algorithms
  //! by adaptive algorithm for BSpline surfaces. For other surfaces algorithm
  //! is the same as in method ComputeSamplePoints(), but only fill arrays of U
  //! and V sample parameters;
  //! theDefl is a requred deflection
  //! theNUmin, theNVmin are minimal nb points for U and V.
  Standard_EXPORT virtual   void SamplePnts (const Standard_Real theDefl, const Standard_Integer theNUmin, const Standard_Integer theNVmin) ;




  DEFINE_STANDARD_RTTI(IntTools_TopolTool)

protected:




private: 


  Standard_Integer myNbSmplU;
  Standard_Integer myNbSmplV;
  Standard_Real myU0;
  Standard_Real myV0;
  Standard_Real myDU;
  Standard_Real myDV;


};







#endif // _IntTools_TopolTool_HeaderFile
