// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESDimen_AngularDimension_HeaderFile
#define _IGESDimen_AngularDimension_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineHandle.hxx>
#include <Handle_IGESDimen_AngularDimension.hxx>

#include <Handle_IGESDimen_GeneralNote.hxx>
#include <Handle_IGESDimen_WitnessLine.hxx>
#include <gp_XY.hxx>
#include <Standard_Real.hxx>
#include <Handle_IGESDimen_LeaderArrow.hxx>
#include <IGESData_IGESEntity.hxx>
#include <Standard_Boolean.hxx>
class IGESDimen_GeneralNote;
class IGESDimen_WitnessLine;
class IGESDimen_LeaderArrow;
class gp_XY;
class gp_Pnt2d;


//! defines AngularDimension, Type <202> Form <0>
//! in package IGESDimen
//! Used to dimension angles
class IGESDimen_AngularDimension : public IGESData_IGESEntity
{

public:

  
  Standard_EXPORT IGESDimen_AngularDimension();
  
  //! This method is used to set the fields of the class
  //! AngularDimension
  //! - aNote         : General Note Entity
  //! - aLine         : First Witness Line Entity or Null
  //! Handle
  //! - anotherLine   : Second Witness Line Entity or Null
  //! Handle
  //! - aVertex       : Coordinates of vertex point
  //! - aRadius       : Radius of leader arcs
  //! - aLeader       : First Leader Entity
  //! - anotherLeader : Second Leader Entity
  Standard_EXPORT   void Init (const Handle(IGESDimen_GeneralNote)& aNote, const Handle(IGESDimen_WitnessLine)& aLine, const Handle(IGESDimen_WitnessLine)& anotherLine, const gp_XY& aVertex, const Standard_Real aRadius, const Handle(IGESDimen_LeaderArrow)& aLeader, const Handle(IGESDimen_LeaderArrow)& anotherLeader) ;
  
  //! returns the General Note Entity of the Dimension.
  Standard_EXPORT   Handle(IGESDimen_GeneralNote) Note()  const;
  
  //! returns False if theFirstWitnessLine is Null Handle.
  Standard_EXPORT   Standard_Boolean HasFirstWitnessLine()  const;
  
  //! returns the First Witness Line Entity or Null Handle.
  Standard_EXPORT   Handle(IGESDimen_WitnessLine) FirstWitnessLine()  const;
  
  //! returns False if theSecondWitnessLine is Null Handle.
  Standard_EXPORT   Standard_Boolean HasSecondWitnessLine()  const;
  
  //! returns the Second Witness Line Entity or Null Handle.
  Standard_EXPORT   Handle(IGESDimen_WitnessLine) SecondWitnessLine()  const;
  
  //! returns the co-ordinates of the Vertex point as Pnt2d from gp.
  Standard_EXPORT   gp_Pnt2d Vertex()  const;
  
  //! returns the co-ordinates of the Vertex point as Pnt2d from gp
  //! after Transformation. (Z = 0.0 for Transformation)
  Standard_EXPORT   gp_Pnt2d TransformedVertex()  const;
  
  //! returns the Radius of the Leader arcs.
  Standard_EXPORT   Standard_Real Radius()  const;
  
  //! returns the First Leader Entity.
  Standard_EXPORT   Handle(IGESDimen_LeaderArrow) FirstLeader()  const;
  
  //! returns the Second Leader Entity.
  Standard_EXPORT   Handle(IGESDimen_LeaderArrow) SecondLeader()  const;




  DEFINE_STANDARD_RTTI(IGESDimen_AngularDimension)

protected:




private: 


  Handle(IGESDimen_GeneralNote) theNote;
  Handle(IGESDimen_WitnessLine) theFirstWitnessLine;
  Handle(IGESDimen_WitnessLine) theSecondWitnessLine;
  gp_XY theVertex;
  Standard_Real theRadius;
  Handle(IGESDimen_LeaderArrow) theFirstLeader;
  Handle(IGESDimen_LeaderArrow) theSecondLeader;


};







#endif // _IGESDimen_AngularDimension_HeaderFile
