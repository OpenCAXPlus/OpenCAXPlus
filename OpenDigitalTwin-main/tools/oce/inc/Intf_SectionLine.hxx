// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Intf_SectionLine_HeaderFile
#define _Intf_SectionLine_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineAlloc.hxx>
#include <Standard_Macro.hxx>

#include <Intf_SeqOfSectionPoint.hxx>
#include <Standard_Boolean.hxx>
#include <Standard_Integer.hxx>
class Standard_OutOfRange;
class Intf_SectionPoint;


//! Describe    a  polyline  of   intersection  between two
//! polyhedra as a sequence of points of intersection.
class Intf_SectionLine 
{
public:

  DEFINE_STANDARD_ALLOC

  
  //! Returns number of points in this SectionLine.
      Standard_Integer NumberOfPoints()  const;
  
  //! Gives the point of intersection of  address <Index>  in the
  //! SectionLine.
  Standard_EXPORT  const  Intf_SectionPoint& GetPoint (const Standard_Integer Index)  const;
  
  //! Returns True if the SectionLine is closed.
  Standard_EXPORT   Standard_Boolean IsClosed()  const;
  
  //! Returns True if ThePI is in the SectionLine <me>.
  Standard_EXPORT   Standard_Boolean Contains (const Intf_SectionPoint& ThePI)  const;
  
  //! Checks if <ThePI>  is an end of  the SectionLine. Returns 1
  //! for the beginning, 2 for the end, otherwise 0.
  Standard_EXPORT   Standard_Integer IsEnd (const Intf_SectionPoint& ThePI)  const;
  
  //! Compares two SectionLines.
  Standard_EXPORT   Standard_Boolean IsEqual (const Intf_SectionLine& Other)  const;
  Standard_Boolean operator == (const Intf_SectionLine& Other)  const
{
  return IsEqual(Other);
}
  
  //! Constructs an empty SectionLine.
  Standard_EXPORT Intf_SectionLine();
  
  //! Copies a SectionLine.
  Standard_EXPORT Intf_SectionLine(const Intf_SectionLine& Other);
  
  //! Adds a point at the end of the SectionLine.
  Standard_EXPORT   void Append (const Intf_SectionPoint& Pi) ;
  
  //! Concatenates   the SectionLine  <LS>  at  the  end  of  the
  //! SectionLine <me>.
  Standard_EXPORT   void Append (Intf_SectionLine& LS) ;
  
  //! Adds a point to the beginning of the SectionLine <me>.
  Standard_EXPORT   void Prepend (const Intf_SectionPoint& Pi) ;
  
  //! Concatenates a SectionLine  <LS>  at the  beginning  of the
  //! SectionLine <me>.
  Standard_EXPORT   void Prepend (Intf_SectionLine& LS) ;
  
  //! Reverses the order of the elements of the SectionLine.
  Standard_EXPORT   void Reverse() ;
  
  //! Closes the SectionLine.
  Standard_EXPORT   void Close() ;
  
  Standard_EXPORT   void Dump (const Standard_Integer Indent)  const;




protected:





private:



  Intf_SeqOfSectionPoint myPoints;
  Standard_Boolean closed;


};


#include <Intf_SectionLine.lxx>





#endif // _Intf_SectionLine_HeaderFile
